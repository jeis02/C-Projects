#include <iostream>

class PIDController {
private:
    float kp, ki, kd;  // Proportional, Integral, Derivative constants
    float prev_error, integral;

public:
    PIDController(float kp, float ki, float kd) : kp(kp), ki(ki), kd(kd), prev_error(0), integral(0) {}

    float compute(float setpoint, float measured_value) {
        float error = setpoint - measured_value;
        integral += error;
        float derivative = error - prev_error;
        prev_error = error;

        return kp * error + ki * integral + kd * derivative;
    }
};

int main() {
    float kp = 0.5, ki = 0.1, kd = 0.2;  // PID constants
    float setpoint = 100;  // Desired setpoint
    float measured_value = 50;  // Measured process variable

    PIDController pid(kp, ki, kd);

    for (int i = 0; i < 10; ++i) {
        float control_output = pid.compute(setpoint, measured_value);
        // Apply control_output to the system and measure new_value
        // For simplicity, let's assume new_value is updated in each iteration
        measured_value += control_output;
        std::cout << "Iteration " << i+1 << ": Control Output = " << control_output << ", Measured Value = " << measured_value << std::endl;
    }

    return 0;
}
